require "http/client"
require "benchmark"
require "halite"
require "xml"


client = HTTP::Client
t_t_t = Time.utc - Time.utc

# get links posted in the html form, turn them into array
links = [
  "https://www.analyticsvidhya.com/blog/2019/06/comprehensive-guide-text-summarization-using-deep-learning-python/",
  "https://towardsdatascience.com/text-summarization-using-deep-learning-6e379ed2e89c",
  "https://machinelearningmastery.com/gentle-introduction-text-summarization/",
  "https://www.sciencedirect.com/science/article/pii/S1319157819301259",
  "https://github.com/mbadry1/DeepLearning.ai-Summary",
  "https://www.cnn.com/2020/03/12/opinions/oval-office-coronavirus-speech-trumps-worst-bergen/index.html",
  "https://www.nytimes.com/2020/03/11/us/politics/trump-coronavirus-speech.html",
  "https://www.caranddriver.com/reviews/a21786823/2019-audi-q8-first-drive-review/",
  "https://www.topgear.com/car-reviews/audi/q8",
  "https://www.youtube.com/watch?v=mii6NydPiqI",
  "https://gardenerspath.com/how-to/beginners/first-vegetable-garden/",
  "https://lifehacker.com/the-seven-easiest-vegetables-to-grow-for-beginner-garde-1562176780",
  "https://www.gardeningknowhow.com/edible/vegetables/vgen/vegetable-gardening-for-beginners.htm"
]

regex = /\b(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|(Nov|Dec)(?:ember)?)\s(?:[0-3][0-9]|[0-9]),\s(?:[1,2][0,9][0,1,2,9][0-9])\b/
alt_regex = /\b(?:[0-3][0-9]|[0-9])\s(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|(Nov|Dec)(?:ember)?)\s(?:[1,2][0,9][0,1,2,9][0-9])\b/
date_regex = /(?:[1,2][0,9][0,1,2,9][0-9])-(?:0(?:[1-9])?|1(?:[0-2])?)-(?:3(?:[0,1])?|(0|1|2)(?:[0-9])?)T(?:2(?:[0-4])?|(0|1)(?:[0-9])?):(?:[0-5](?:[0-9])?):(?:[0-5](?:[0-9])?)\D(\d{2,4}|)(:\d{2}|Z|)/

#ex_path = "//script[@type=\"application/ld+json\"]"
ex_path = "//body"





p Benchmark.realtime {
  links.each do |link|
    p Benchmark.realtime {
      timer_start = Time.utc
      day = "date"
      #word = client.get(link, headers: HTTP::Headers{"User-Agent" => "Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0", "Content-Type" => "application/ld+json"}).body
      soup = Halite.follow.get(link, headers: {"User-Agent" => "Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0"}).body
      bad_soup = soup
      xml_soup = XML.parse_html(soup)

      if (!xml_soup.xpath_nodes(ex_path).empty?)
        xml_soup.xpath_nodes(ex_path)[0].children.each do |child|

          word = child.text

          if word.matches?(regex)
            regex.match(word)
            day = $0
            #p "___________________________day => #{day}______________________________"

          elsif word.matches?(alt_regex)
            alt_regex.match(word)
            day = $0
            #p "___________________________day => #{day}______________________________"

          elsif word.matches?(date_regex)
            date_regex.match(word)
            day = $0
            #p "___________________________day => #{day}______________________________"
          end


        end
      end

      if day == "date" || day.matches?(date_regex)
        #bad_soup = Halite.follow.get(link, headers: {"User-Agent" => "Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0"}).body
        if bad_soup.matches?(regex)
          regex.match(bad_soup)
          day = $0
          #p "___________________________day => #{day}______________________________"

        elsif bad_soup.matches?(alt_regex)
          alt_regex.match(bad_soup)
          day = $0
          #p "___________________________day => #{day}______________________________"
        end
      end

      timer_stop = Time.utc
      time_taken = timer_stop-timer_start
      p "#{link}|#{day}|#{time_taken.milliseconds}ms"


      if links[0] == link
         t_t_t = time_taken

      else
        t_t_t = time_taken + t_t_t

      end


    }
    if links[links.size-1] == link
      p "Total Time of Execution: #{t_t_t.seconds}s#{t_t_t.milliseconds}ms"
    end
  end
}
__________________________________________________________________________________
var aj_ax = new XMLHttpRequest();
var link = ["https://www.analyticsvidhya.com/blog/2019/06/comprehensive-guide-text-summarization-using-deep-learning-python/"]

// Setup our listener to process completed requests
aj_ax.onload = function () {

		console.log('Reading Response ...' +aj_ax.status);
    console.log('This always runs...');
};

// Create and send a GET request
// The first argument is the post type (GET, POST, PUT, DELETE, etc.)
// The second argument is the endpoint
aj_ax.open('POST', '',true);
aj_ax.onreadystatechange = function () {
			console.log("On ready state change" +aj_ax.readyState)
			console.log(aj_ax.responseType)
			console.log(aj_ax.responseText)


};
aj_ax.setRequestHeader("Content-Type", "application/json");

aj_ax.send(JSON.stringify(link));
____________________________________________________________________________________
